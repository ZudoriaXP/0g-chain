// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zg/validatorvesting/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryCirculatingSupplyRequest is the request type for the Query/CirculatingSupply RPC method
type QueryCirculatingSupplyRequest struct {
}

func (m *QueryCirculatingSupplyRequest) Reset()         { *m = QueryCirculatingSupplyRequest{} }
func (m *QueryCirculatingSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCirculatingSupplyRequest) ProtoMessage()    {}
func (*QueryCirculatingSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{0}
}
func (m *QueryCirculatingSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculatingSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculatingSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculatingSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculatingSupplyRequest.Merge(m, src)
}
func (m *QueryCirculatingSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculatingSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculatingSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculatingSupplyRequest proto.InternalMessageInfo

// QueryCirculatingSupplyResponse is the response type for the Query/CirculatingSupply RPC method
type QueryCirculatingSupplyResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueryCirculatingSupplyResponse) Reset()         { *m = QueryCirculatingSupplyResponse{} }
func (m *QueryCirculatingSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCirculatingSupplyResponse) ProtoMessage()    {}
func (*QueryCirculatingSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{1}
}
func (m *QueryCirculatingSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculatingSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculatingSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculatingSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculatingSupplyResponse.Merge(m, src)
}
func (m *QueryCirculatingSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculatingSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculatingSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculatingSupplyResponse proto.InternalMessageInfo

// QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC method
type QueryTotalSupplyRequest struct {
}

func (m *QueryTotalSupplyRequest) Reset()         { *m = QueryTotalSupplyRequest{} }
func (m *QueryTotalSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyRequest) ProtoMessage()    {}
func (*QueryTotalSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{2}
}
func (m *QueryTotalSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyRequest.Merge(m, src)
}
func (m *QueryTotalSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyRequest proto.InternalMessageInfo

// QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC method
type QueryTotalSupplyResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueryTotalSupplyResponse) Reset()         { *m = QueryTotalSupplyResponse{} }
func (m *QueryTotalSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyResponse) ProtoMessage()    {}
func (*QueryTotalSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{3}
}
func (m *QueryTotalSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyResponse.Merge(m, src)
}
func (m *QueryTotalSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyResponse proto.InternalMessageInfo

// QueryCirculatingSupplyHARDRequest is the request type for the Query/CirculatingSupplyHARD RPC method
type QueryCirculatingSupplyHARDRequest struct {
}

func (m *QueryCirculatingSupplyHARDRequest) Reset()         { *m = QueryCirculatingSupplyHARDRequest{} }
func (m *QueryCirculatingSupplyHARDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCirculatingSupplyHARDRequest) ProtoMessage()    {}
func (*QueryCirculatingSupplyHARDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{4}
}
func (m *QueryCirculatingSupplyHARDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculatingSupplyHARDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculatingSupplyHARDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculatingSupplyHARDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculatingSupplyHARDRequest.Merge(m, src)
}
func (m *QueryCirculatingSupplyHARDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculatingSupplyHARDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculatingSupplyHARDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculatingSupplyHARDRequest proto.InternalMessageInfo

// QueryCirculatingSupplyHARDResponse is the response type for the Query/CirculatingSupplyHARD RPC method
type QueryCirculatingSupplyHARDResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueryCirculatingSupplyHARDResponse) Reset()         { *m = QueryCirculatingSupplyHARDResponse{} }
func (m *QueryCirculatingSupplyHARDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCirculatingSupplyHARDResponse) ProtoMessage()    {}
func (*QueryCirculatingSupplyHARDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{5}
}
func (m *QueryCirculatingSupplyHARDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculatingSupplyHARDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculatingSupplyHARDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculatingSupplyHARDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculatingSupplyHARDResponse.Merge(m, src)
}
func (m *QueryCirculatingSupplyHARDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculatingSupplyHARDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculatingSupplyHARDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculatingSupplyHARDResponse proto.InternalMessageInfo

// QueryCirculatingSupplyUSDXRequest is the request type for the Query/CirculatingSupplyUSDX RPC method
type QueryCirculatingSupplyUSDXRequest struct {
}

func (m *QueryCirculatingSupplyUSDXRequest) Reset()         { *m = QueryCirculatingSupplyUSDXRequest{} }
func (m *QueryCirculatingSupplyUSDXRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCirculatingSupplyUSDXRequest) ProtoMessage()    {}
func (*QueryCirculatingSupplyUSDXRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{6}
}
func (m *QueryCirculatingSupplyUSDXRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculatingSupplyUSDXRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculatingSupplyUSDXRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculatingSupplyUSDXRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculatingSupplyUSDXRequest.Merge(m, src)
}
func (m *QueryCirculatingSupplyUSDXRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculatingSupplyUSDXRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculatingSupplyUSDXRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculatingSupplyUSDXRequest proto.InternalMessageInfo

// QueryCirculatingSupplyUSDXResponse is the response type for the Query/CirculatingSupplyUSDX RPC method
type QueryCirculatingSupplyUSDXResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueryCirculatingSupplyUSDXResponse) Reset()         { *m = QueryCirculatingSupplyUSDXResponse{} }
func (m *QueryCirculatingSupplyUSDXResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCirculatingSupplyUSDXResponse) ProtoMessage()    {}
func (*QueryCirculatingSupplyUSDXResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{7}
}
func (m *QueryCirculatingSupplyUSDXResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculatingSupplyUSDXResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculatingSupplyUSDXResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculatingSupplyUSDXResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculatingSupplyUSDXResponse.Merge(m, src)
}
func (m *QueryCirculatingSupplyUSDXResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculatingSupplyUSDXResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculatingSupplyUSDXResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculatingSupplyUSDXResponse proto.InternalMessageInfo

// QueryCirculatingSupplySWPRequest is the request type for the Query/CirculatingSupplySWP RPC method
type QueryCirculatingSupplySWPRequest struct {
}

func (m *QueryCirculatingSupplySWPRequest) Reset()         { *m = QueryCirculatingSupplySWPRequest{} }
func (m *QueryCirculatingSupplySWPRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCirculatingSupplySWPRequest) ProtoMessage()    {}
func (*QueryCirculatingSupplySWPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{8}
}
func (m *QueryCirculatingSupplySWPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculatingSupplySWPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculatingSupplySWPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculatingSupplySWPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculatingSupplySWPRequest.Merge(m, src)
}
func (m *QueryCirculatingSupplySWPRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculatingSupplySWPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculatingSupplySWPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculatingSupplySWPRequest proto.InternalMessageInfo

// QueryCirculatingSupplySWPResponse is the response type for the Query/CirculatingSupplySWP RPC method
type QueryCirculatingSupplySWPResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueryCirculatingSupplySWPResponse) Reset()         { *m = QueryCirculatingSupplySWPResponse{} }
func (m *QueryCirculatingSupplySWPResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCirculatingSupplySWPResponse) ProtoMessage()    {}
func (*QueryCirculatingSupplySWPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{9}
}
func (m *QueryCirculatingSupplySWPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculatingSupplySWPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculatingSupplySWPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculatingSupplySWPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculatingSupplySWPResponse.Merge(m, src)
}
func (m *QueryCirculatingSupplySWPResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculatingSupplySWPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculatingSupplySWPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculatingSupplySWPResponse proto.InternalMessageInfo

// QueryTotalSupplyHARDRequest is the request type for the Query/TotalSupplyHARD RPC method
type QueryTotalSupplyHARDRequest struct {
}

func (m *QueryTotalSupplyHARDRequest) Reset()         { *m = QueryTotalSupplyHARDRequest{} }
func (m *QueryTotalSupplyHARDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyHARDRequest) ProtoMessage()    {}
func (*QueryTotalSupplyHARDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{10}
}
func (m *QueryTotalSupplyHARDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyHARDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyHARDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyHARDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyHARDRequest.Merge(m, src)
}
func (m *QueryTotalSupplyHARDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyHARDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyHARDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyHARDRequest proto.InternalMessageInfo

// QueryTotalSupplyHARDResponse is the response type for the Query/TotalSupplyHARD RPC method
type QueryTotalSupplyHARDResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueryTotalSupplyHARDResponse) Reset()         { *m = QueryTotalSupplyHARDResponse{} }
func (m *QueryTotalSupplyHARDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyHARDResponse) ProtoMessage()    {}
func (*QueryTotalSupplyHARDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{11}
}
func (m *QueryTotalSupplyHARDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyHARDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyHARDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyHARDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyHARDResponse.Merge(m, src)
}
func (m *QueryTotalSupplyHARDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyHARDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyHARDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyHARDResponse proto.InternalMessageInfo

// QueryTotalSupplyUSDXRequest is the request type for the Query/TotalSupplyUSDX RPC method
type QueryTotalSupplyUSDXRequest struct {
}

func (m *QueryTotalSupplyUSDXRequest) Reset()         { *m = QueryTotalSupplyUSDXRequest{} }
func (m *QueryTotalSupplyUSDXRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyUSDXRequest) ProtoMessage()    {}
func (*QueryTotalSupplyUSDXRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{12}
}
func (m *QueryTotalSupplyUSDXRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyUSDXRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyUSDXRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyUSDXRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyUSDXRequest.Merge(m, src)
}
func (m *QueryTotalSupplyUSDXRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyUSDXRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyUSDXRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyUSDXRequest proto.InternalMessageInfo

// QueryTotalSupplyUSDXResponse is the response type for the Query/TotalSupplyUSDX RPC method
type QueryTotalSupplyUSDXResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueryTotalSupplyUSDXResponse) Reset()         { *m = QueryTotalSupplyUSDXResponse{} }
func (m *QueryTotalSupplyUSDXResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyUSDXResponse) ProtoMessage()    {}
func (*QueryTotalSupplyUSDXResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02a785c2c013eb6, []int{13}
}
func (m *QueryTotalSupplyUSDXResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyUSDXResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyUSDXResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyUSDXResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyUSDXResponse.Merge(m, src)
}
func (m *QueryTotalSupplyUSDXResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyUSDXResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyUSDXResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyUSDXResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryCirculatingSupplyRequest)(nil), "zg.validatorvesting.v1beta1.QueryCirculatingSupplyRequest")
	proto.RegisterType((*QueryCirculatingSupplyResponse)(nil), "zg.validatorvesting.v1beta1.QueryCirculatingSupplyResponse")
	proto.RegisterType((*QueryTotalSupplyRequest)(nil), "zg.validatorvesting.v1beta1.QueryTotalSupplyRequest")
	proto.RegisterType((*QueryTotalSupplyResponse)(nil), "zg.validatorvesting.v1beta1.QueryTotalSupplyResponse")
	proto.RegisterType((*QueryCirculatingSupplyHARDRequest)(nil), "zg.validatorvesting.v1beta1.QueryCirculatingSupplyHARDRequest")
	proto.RegisterType((*QueryCirculatingSupplyHARDResponse)(nil), "zg.validatorvesting.v1beta1.QueryCirculatingSupplyHARDResponse")
	proto.RegisterType((*QueryCirculatingSupplyUSDXRequest)(nil), "zg.validatorvesting.v1beta1.QueryCirculatingSupplyUSDXRequest")
	proto.RegisterType((*QueryCirculatingSupplyUSDXResponse)(nil), "zg.validatorvesting.v1beta1.QueryCirculatingSupplyUSDXResponse")
	proto.RegisterType((*QueryCirculatingSupplySWPRequest)(nil), "zg.validatorvesting.v1beta1.QueryCirculatingSupplySWPRequest")
	proto.RegisterType((*QueryCirculatingSupplySWPResponse)(nil), "zg.validatorvesting.v1beta1.QueryCirculatingSupplySWPResponse")
	proto.RegisterType((*QueryTotalSupplyHARDRequest)(nil), "zg.validatorvesting.v1beta1.QueryTotalSupplyHARDRequest")
	proto.RegisterType((*QueryTotalSupplyHARDResponse)(nil), "zg.validatorvesting.v1beta1.QueryTotalSupplyHARDResponse")
	proto.RegisterType((*QueryTotalSupplyUSDXRequest)(nil), "zg.validatorvesting.v1beta1.QueryTotalSupplyUSDXRequest")
	proto.RegisterType((*QueryTotalSupplyUSDXResponse)(nil), "zg.validatorvesting.v1beta1.QueryTotalSupplyUSDXResponse")
}

func init() {
	proto.RegisterFile("zg/validatorvesting/v1beta1/query.proto", fileDescriptor_a02a785c2c013eb6)
}

var fileDescriptor_a02a785c2c013eb6 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x63, 0x24, 0x2a, 0x71, 0x1d, 0x10, 0xa7, 0x22, 0x5a, 0xb7, 0x75, 0x8a, 0x91, 0x00,
	0x21, 0xe2, 0x4b, 0x42, 0x4a, 0x5b, 0x68, 0x8b, 0x28, 0x1d, 0xe8, 0x06, 0x49, 0x11, 0x88, 0x25,
	0xba, 0x24, 0x96, 0x63, 0xe1, 0xf8, 0xdc, 0xdc, 0x39, 0x34, 0x19, 0xf9, 0x02, 0x20, 0xf1, 0x3d,
	0x98, 0xd8, 0xd9, 0x50, 0xc6, 0x8a, 0x0e, 0x20, 0x86, 0x0a, 0x12, 0x3e, 0x08, 0xf2, 0xf9, 0xa2,
	0x1e, 0x89, 0x9b, 0x62, 0x57, 0x81, 0x29, 0x89, 0xfd, 0xfe, 0x7e, 0xbf, 0xbf, 0xdf, 0xbb, 0xbf,
	0x02, 0x6e, 0x74, 0x2c, 0xd4, 0xc2, 0x8e, 0x5d, 0xc3, 0x8c, 0x34, 0x5b, 0x26, 0x65, 0xb6, 0x6b,
	0xa1, 0x56, 0xae, 0x62, 0x32, 0x9c, 0x43, 0x7b, 0xbe, 0xd9, 0x6c, 0x1b, 0x5e, 0x93, 0x30, 0x02,
	0xe7, 0x3b, 0x96, 0x31, 0x5c, 0x68, 0x88, 0x42, 0x75, 0xae, 0x4a, 0x68, 0x83, 0xd0, 0x32, 0x2f,
	0x45, 0xe1, 0x8f, 0x50, 0xa7, 0xce, 0x58, 0xc4, 0x22, 0xe1, 0xf5, 0xe0, 0x9b, 0xb8, 0xba, 0x60,
	0x11, 0x62, 0x39, 0x26, 0xc2, 0x9e, 0x8d, 0xb0, 0xeb, 0x12, 0x86, 0x99, 0x4d, 0x5c, 0xa1, 0xd1,
	0xd3, 0x60, 0xf1, 0x69, 0xd0, 0xfa, 0x91, 0xdd, 0xac, 0xfa, 0x0e, 0x0e, 0x5a, 0x95, 0x7c, 0xcf,
	0x73, 0xda, 0x45, 0x73, 0xcf, 0x37, 0x29, 0xd3, 0x5b, 0x40, 0x3b, 0xa9, 0x80, 0x7a, 0xc4, 0xa5,
	0x26, 0xdc, 0x05, 0x53, 0xb8, 0x41, 0x7c, 0x97, 0xcd, 0x2a, 0x4b, 0xca, 0xcd, 0x0b, 0x5b, 0xeb,
	0xdd, 0xa3, 0x74, 0xea, 0xfb, 0x51, 0xfa, 0xba, 0x65, 0xb3, 0xba, 0x5f, 0x31, 0xaa, 0xa4, 0x21,
	0x38, 0xc5, 0x47, 0x86, 0xd6, 0x5e, 0x21, 0xd6, 0xf6, 0x4c, 0x6a, 0xec, 0xb8, 0xec, 0xcb, 0xc7,
	0x0c, 0x10, 0x36, 0x76, 0x5c, 0x56, 0x14, 0xcf, 0xd2, 0xe7, 0xc0, 0x15, 0xde, 0x77, 0x97, 0x30,
	0xec, 0xfc, 0x89, 0xe4, 0x81, 0xd9, 0xd1, 0x5b, 0x13, 0x85, 0xb9, 0x06, 0xae, 0x46, 0xbf, 0x84,
	0xc7, 0x0f, 0x8b, 0xdb, 0x03, 0xac, 0x0e, 0xd0, 0xc7, 0x15, 0xfd, 0x1f, 0xc0, 0x67, 0xa5, 0xed,
	0x17, 0xa7, 0x02, 0x86, 0x45, 0x13, 0x05, 0xd4, 0xc1, 0x52, 0x74, 0xef, 0xd2, 0xf3, 0x27, 0x03,
	0xbe, 0xf6, 0x49, 0x26, 0x78, 0xcd, 0x44, 0xf1, 0x16, 0xc1, 0xfc, 0xf0, 0x4a, 0xc9, 0xa3, 0x65,
	0x60, 0x21, 0xfa, 0xf6, 0xbf, 0x86, 0x92, 0xc7, 0x19, 0x01, 0x35, 0xf9, 0x41, 0xe6, 0xdf, 0x4e,
	0x83, 0xf3, 0xbc, 0x2d, 0xfc, 0xac, 0x80, 0x4b, 0x23, 0xa3, 0x82, 0xf7, 0x8c, 0x31, 0xe9, 0x65,
	0x8c, 0xcd, 0x1a, 0xf5, 0x7e, 0x22, 0x6d, 0x68, 0x57, 0x5f, 0x7d, 0x73, 0xf8, 0xeb, 0xfd, 0xb9,
	0x3c, 0xcc, 0xa2, 0xac, 0x94, 0xb3, 0x99, 0xe1, 0xa0, 0xad, 0x1e, 0x3f, 0xa0, 0x4c, 0x43, 0xe4,
	0x0f, 0x0a, 0x98, 0x96, 0x5e, 0x22, 0x2c, 0x9c, 0x8e, 0x31, 0x9a, 0x4a, 0xea, 0x72, 0x4c, 0x95,
	0xc0, 0xce, 0x73, 0xec, 0xdb, 0xf0, 0xd6, 0x78, 0x6c, 0x16, 0x48, 0x07, 0xc0, 0x5f, 0x15, 0x70,
	0x39, 0x32, 0x65, 0xe0, 0x66, 0x82, 0x37, 0x28, 0x2d, 0xba, 0xfa, 0x20, 0xb1, 0x5e, 0xd8, 0xd9,
	0xe0, 0x76, 0x56, 0xe0, 0x72, 0xdc, 0x29, 0x94, 0xeb, 0xb8, 0x59, 0x8b, 0x76, 0x16, 0x6c, 0x75,
	0x22, 0x67, 0xd2, 0x69, 0x49, 0xe4, 0x4c, 0x3e, 0x4e, 0x67, 0x70, 0xe6, 0xd3, 0xda, 0x3e, 0x3c,
	0x54, 0xc0, 0x4c, 0x54, 0xb0, 0xc1, 0x8d, 0x04, 0x60, 0xc7, 0xa1, 0xa9, 0x6e, 0x26, 0x95, 0x0b,
	0x5b, 0xeb, 0xdc, 0xd6, 0x5d, 0x58, 0x88, 0x6d, 0x8b, 0xbe, 0xf6, 0xe0, 0x27, 0x05, 0x5c, 0x1c,
	0x0a, 0x45, 0xb8, 0x1a, 0xeb, 0x20, 0xc8, 0xdb, 0xb7, 0x96, 0x40, 0x29, 0x6c, 0xac, 0x70, 0x1b,
	0x39, 0x88, 0xfe, 0xfe, 0x18, 0x85, 0x1b, 0x37, 0xe4, 0x80, 0xef, 0x5a, 0x3c, 0x07, 0xf2, 0x96,
	0xad, 0x25, 0x50, 0x9e, 0xc1, 0x41, 0xb0, 0x59, 0x5b, 0xc5, 0xee, 0x4f, 0x2d, 0xd5, 0xed, 0x69,
	0xca, 0x41, 0x4f, 0x53, 0x7e, 0xf4, 0x34, 0xe5, 0x5d, 0x5f, 0x4b, 0x1d, 0xf4, 0xb5, 0xd4, 0xb7,
	0xbe, 0x96, 0x7a, 0x59, 0x90, 0xd2, 0x3e, 0x6b, 0x39, 0xb8, 0x42, 0x51, 0xd6, 0xca, 0x54, 0xeb,
	0xd8, 0x76, 0xd1, 0x7e, 0x44, 0x1f, 0x9e, 0xff, 0x95, 0x29, 0xfe, 0xef, 0xf0, 0xce, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x63, 0x31, 0x5f, 0xeb, 0xb4, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// CirculatingSupply returns the total amount of kava tokens in circulation
	CirculatingSupply(ctx context.Context, in *QueryCirculatingSupplyRequest, opts ...grpc.CallOption) (*QueryCirculatingSupplyResponse, error)
	// TotalSupply returns the total amount of kava tokens
	TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error)
	// CirculatingSupplyHARD returns the total amount of hard tokens in circulation
	CirculatingSupplyHARD(ctx context.Context, in *QueryCirculatingSupplyHARDRequest, opts ...grpc.CallOption) (*QueryCirculatingSupplyHARDResponse, error)
	// CirculatingSupplyUSDX returns the total amount of usdx tokens in circulation
	CirculatingSupplyUSDX(ctx context.Context, in *QueryCirculatingSupplyUSDXRequest, opts ...grpc.CallOption) (*QueryCirculatingSupplyUSDXResponse, error)
	// CirculatingSupplySWP returns the total amount of swp tokens in circulation
	CirculatingSupplySWP(ctx context.Context, in *QueryCirculatingSupplySWPRequest, opts ...grpc.CallOption) (*QueryCirculatingSupplySWPResponse, error)
	// TotalSupplyHARD returns the total amount of hard tokens
	TotalSupplyHARD(ctx context.Context, in *QueryTotalSupplyHARDRequest, opts ...grpc.CallOption) (*QueryTotalSupplyHARDResponse, error)
	// TotalSupplyUSDX returns the total amount of usdx tokens
	TotalSupplyUSDX(ctx context.Context, in *QueryTotalSupplyUSDXRequest, opts ...grpc.CallOption) (*QueryTotalSupplyUSDXResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) CirculatingSupply(ctx context.Context, in *QueryCirculatingSupplyRequest, opts ...grpc.CallOption) (*QueryCirculatingSupplyResponse, error) {
	out := new(QueryCirculatingSupplyResponse)
	err := c.cc.Invoke(ctx, "/zg.validatorvesting.v1beta1.Query/CirculatingSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error) {
	out := new(QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/zg.validatorvesting.v1beta1.Query/TotalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CirculatingSupplyHARD(ctx context.Context, in *QueryCirculatingSupplyHARDRequest, opts ...grpc.CallOption) (*QueryCirculatingSupplyHARDResponse, error) {
	out := new(QueryCirculatingSupplyHARDResponse)
	err := c.cc.Invoke(ctx, "/zg.validatorvesting.v1beta1.Query/CirculatingSupplyHARD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CirculatingSupplyUSDX(ctx context.Context, in *QueryCirculatingSupplyUSDXRequest, opts ...grpc.CallOption) (*QueryCirculatingSupplyUSDXResponse, error) {
	out := new(QueryCirculatingSupplyUSDXResponse)
	err := c.cc.Invoke(ctx, "/zg.validatorvesting.v1beta1.Query/CirculatingSupplyUSDX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CirculatingSupplySWP(ctx context.Context, in *QueryCirculatingSupplySWPRequest, opts ...grpc.CallOption) (*QueryCirculatingSupplySWPResponse, error) {
	out := new(QueryCirculatingSupplySWPResponse)
	err := c.cc.Invoke(ctx, "/zg.validatorvesting.v1beta1.Query/CirculatingSupplySWP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupplyHARD(ctx context.Context, in *QueryTotalSupplyHARDRequest, opts ...grpc.CallOption) (*QueryTotalSupplyHARDResponse, error) {
	out := new(QueryTotalSupplyHARDResponse)
	err := c.cc.Invoke(ctx, "/zg.validatorvesting.v1beta1.Query/TotalSupplyHARD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupplyUSDX(ctx context.Context, in *QueryTotalSupplyUSDXRequest, opts ...grpc.CallOption) (*QueryTotalSupplyUSDXResponse, error) {
	out := new(QueryTotalSupplyUSDXResponse)
	err := c.cc.Invoke(ctx, "/zg.validatorvesting.v1beta1.Query/TotalSupplyUSDX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// CirculatingSupply returns the total amount of kava tokens in circulation
	CirculatingSupply(context.Context, *QueryCirculatingSupplyRequest) (*QueryCirculatingSupplyResponse, error)
	// TotalSupply returns the total amount of kava tokens
	TotalSupply(context.Context, *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error)
	// CirculatingSupplyHARD returns the total amount of hard tokens in circulation
	CirculatingSupplyHARD(context.Context, *QueryCirculatingSupplyHARDRequest) (*QueryCirculatingSupplyHARDResponse, error)
	// CirculatingSupplyUSDX returns the total amount of usdx tokens in circulation
	CirculatingSupplyUSDX(context.Context, *QueryCirculatingSupplyUSDXRequest) (*QueryCirculatingSupplyUSDXResponse, error)
	// CirculatingSupplySWP returns the total amount of swp tokens in circulation
	CirculatingSupplySWP(context.Context, *QueryCirculatingSupplySWPRequest) (*QueryCirculatingSupplySWPResponse, error)
	// TotalSupplyHARD returns the total amount of hard tokens
	TotalSupplyHARD(context.Context, *QueryTotalSupplyHARDRequest) (*QueryTotalSupplyHARDResponse, error)
	// TotalSupplyUSDX returns the total amount of usdx tokens
	TotalSupplyUSDX(context.Context, *QueryTotalSupplyUSDXRequest) (*QueryTotalSupplyUSDXResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) CirculatingSupply(ctx context.Context, req *QueryCirculatingSupplyRequest) (*QueryCirculatingSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CirculatingSupply not implemented")
}
func (*UnimplementedQueryServer) TotalSupply(ctx context.Context, req *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupply not implemented")
}
func (*UnimplementedQueryServer) CirculatingSupplyHARD(ctx context.Context, req *QueryCirculatingSupplyHARDRequest) (*QueryCirculatingSupplyHARDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CirculatingSupplyHARD not implemented")
}
func (*UnimplementedQueryServer) CirculatingSupplyUSDX(ctx context.Context, req *QueryCirculatingSupplyUSDXRequest) (*QueryCirculatingSupplyUSDXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CirculatingSupplyUSDX not implemented")
}
func (*UnimplementedQueryServer) CirculatingSupplySWP(ctx context.Context, req *QueryCirculatingSupplySWPRequest) (*QueryCirculatingSupplySWPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CirculatingSupplySWP not implemented")
}
func (*UnimplementedQueryServer) TotalSupplyHARD(ctx context.Context, req *QueryTotalSupplyHARDRequest) (*QueryTotalSupplyHARDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupplyHARD not implemented")
}
func (*UnimplementedQueryServer) TotalSupplyUSDX(ctx context.Context, req *QueryTotalSupplyUSDXRequest) (*QueryTotalSupplyUSDXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupplyUSDX not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_CirculatingSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCirculatingSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CirculatingSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zg.validatorvesting.v1beta1.Query/CirculatingSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CirculatingSupply(ctx, req.(*QueryCirculatingSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zg.validatorvesting.v1beta1.Query/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupply(ctx, req.(*QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CirculatingSupplyHARD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCirculatingSupplyHARDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CirculatingSupplyHARD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zg.validatorvesting.v1beta1.Query/CirculatingSupplyHARD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CirculatingSupplyHARD(ctx, req.(*QueryCirculatingSupplyHARDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CirculatingSupplyUSDX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCirculatingSupplyUSDXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CirculatingSupplyUSDX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zg.validatorvesting.v1beta1.Query/CirculatingSupplyUSDX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CirculatingSupplyUSDX(ctx, req.(*QueryCirculatingSupplyUSDXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CirculatingSupplySWP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCirculatingSupplySWPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CirculatingSupplySWP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zg.validatorvesting.v1beta1.Query/CirculatingSupplySWP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CirculatingSupplySWP(ctx, req.(*QueryCirculatingSupplySWPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupplyHARD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyHARDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupplyHARD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zg.validatorvesting.v1beta1.Query/TotalSupplyHARD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupplyHARD(ctx, req.(*QueryTotalSupplyHARDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupplyUSDX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyUSDXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupplyUSDX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zg.validatorvesting.v1beta1.Query/TotalSupplyUSDX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupplyUSDX(ctx, req.(*QueryTotalSupplyUSDXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zg.validatorvesting.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CirculatingSupply",
			Handler:    _Query_CirculatingSupply_Handler,
		},
		{
			MethodName: "TotalSupply",
			Handler:    _Query_TotalSupply_Handler,
		},
		{
			MethodName: "CirculatingSupplyHARD",
			Handler:    _Query_CirculatingSupplyHARD_Handler,
		},
		{
			MethodName: "CirculatingSupplyUSDX",
			Handler:    _Query_CirculatingSupplyUSDX_Handler,
		},
		{
			MethodName: "CirculatingSupplySWP",
			Handler:    _Query_CirculatingSupplySWP_Handler,
		},
		{
			MethodName: "TotalSupplyHARD",
			Handler:    _Query_TotalSupplyHARD_Handler,
		},
		{
			MethodName: "TotalSupplyUSDX",
			Handler:    _Query_TotalSupplyUSDX_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zg/validatorvesting/v1beta1/query.proto",
}

func (m *QueryCirculatingSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculatingSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculatingSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCirculatingSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculatingSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculatingSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCirculatingSupplyHARDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculatingSupplyHARDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculatingSupplyHARDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCirculatingSupplyHARDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculatingSupplyHARDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculatingSupplyHARDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCirculatingSupplyUSDXRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculatingSupplyUSDXRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculatingSupplyUSDXRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCirculatingSupplyUSDXResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculatingSupplyUSDXResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculatingSupplyUSDXResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCirculatingSupplySWPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculatingSupplySWPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculatingSupplySWPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCirculatingSupplySWPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculatingSupplySWPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculatingSupplySWPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyHARDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyHARDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyHARDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyHARDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyHARDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyHARDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyUSDXRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyUSDXRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyUSDXRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyUSDXResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyUSDXResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyUSDXResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCirculatingSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCirculatingSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCirculatingSupplyHARDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCirculatingSupplyHARDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCirculatingSupplyUSDXRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCirculatingSupplyUSDXResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCirculatingSupplySWPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCirculatingSupplySWPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalSupplyHARDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalSupplyHARDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalSupplyUSDXRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalSupplyUSDXResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCirculatingSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculatingSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculatingSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculatingSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculatingSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculatingSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculatingSupplyHARDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculatingSupplyHARDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculatingSupplyHARDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculatingSupplyHARDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculatingSupplyHARDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculatingSupplyHARDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculatingSupplyUSDXRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculatingSupplyUSDXRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculatingSupplyUSDXRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculatingSupplyUSDXResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculatingSupplyUSDXResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculatingSupplyUSDXResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculatingSupplySWPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculatingSupplySWPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculatingSupplySWPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculatingSupplySWPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculatingSupplySWPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculatingSupplySWPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyHARDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyHARDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyHARDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyHARDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyHARDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyHARDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyUSDXRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyUSDXRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyUSDXRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyUSDXResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyUSDXResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyUSDXResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
